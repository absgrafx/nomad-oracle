{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 1,
  "id": 1,
  "links": [],
  "panels": [
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "description": "Is solar production overcoming consumption? ",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "fillOpacity": 71,
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineWidth": 0,
            "spanNulls": false
          },
          "fieldMinMax": false,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Charging"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "C"
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Holding"
            },
            "properties": [
              {
                "id": "displayName",
                "value": "H"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 3,
        "w": 12,
        "x": 0,
        "y": 0
      },
      "id": 13,
      "options": {
        "alignValue": "center",
        "legend": {
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": false
        },
        "mergeValues": true,
        "rowHeight": 1,
        "showValue": "never",
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => \n      not (\n          (r.device == \"Inverter\" and r._field == \"AmpsMPPT\") or \n          (r.device == \"Inverter\" and r._field == \"WattsMain\")\n      )  // Exclude specific rows\n  )\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\")\n  |> group()  // Remove any residual grouping to unify the data\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields as columns\n  |> map(fn: (r) => ({\n      r with \n      AmpsLoad: ((r.AmpsInv + r.AmpsMPPT) - r.AmpsMain),  // Calculate AmpsLoad\n  }))\n    |> map(fn: (r) => ({\n      r with \n      Charging: r.AmpsMPPT >= r.AmpsLoad and r.AmpsMain >= 0  and r.AmpsInv <= 1,\n      Holding: r.AmpsMPPT >= r.AmpsLoad\n  }))\n  |> keep(columns: [\"_time\", \"Holding\",\"Charging\"])\n  |> sort(columns: [\"_time\"], desc: false)  // Ensure ascending time order\n  |> yield(name: \"charge_status\")",
          "refId": "Voltage"
        }
      ],
      "title": "Solar - Holding Load and/or Charging Battery?",
      "transparent": true,
      "type": "state-timeline"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "max": 1200,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "super-light-green",
                "value": 0.01
              },
              {
                "color": "green",
                "value": 50
              },
              {
                "color": "dark-green",
                "value": 90
              },
              {
                "color": "blue",
                "value": 100
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 3,
        "x": 12,
        "y": 0
      },
      "id": 4,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\")\n  |> filter(fn: (r) => r._field == \"WattsMPPT\" or r._field == \"WattsSolar\")\n  |> group(columns: [\"_field\", \"device\"])  // Group by field and device for better series separation\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])  // Keep only relevant fields\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"chargerwatts\")",
          "refId": "Voltage"
        }
      ],
      "title": "Solar Power (Max 1200W)",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "uid": "fe6pg0n8yilmof"
      },
      "description": "State of Charge based on Voltage",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 168,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "red",
                "value": 0
              },
              {
                "color": "#EAB839",
                "value": 4
              },
              {
                "color": "green",
                "value": 12
              },
              {
                "color": "blue",
                "value": 24
              }
            ]
          },
          "unit": "h"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 3,
        "x": 15,
        "y": 0
      },
      "id": 14,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "query": "// State of Charge (SoC) Stream\nsoc_stream = from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r._field == \"VoltsMain\" and r.device == \"Main\")\n  |> map(fn: (r) => ({\n      r with \n      SoC: if r._value >= 13.5 then 100.0 else\n           if r._value >= 13.35 then 99.0 else\n           if r._value >= 13.3 then 90.0 else\n           if r._value >= 13.25 then 80.0 else\n           if r._value >= 13.2 then 70.0 else\n           if r._value >= 13.16 then 60.0 else\n           if r._value >= 13.13 then 50.0 else\n           if r._value >= 13.1 then 40.0 else\n           if r._value >= 13.0 then 30.0 else\n           if r._value >= 12.9 then 20.0 else\n           if r._value >= 12.8 then 10.0 else\n           if r._value >= 12.3 then 5.0 else\n           if r._value >= 11.7 then 7.5 else\n           if r._value >= 11.0 then 2.0 else\n           if r._value >= 10.8 then 1.0 else\n           0.0\n  }))\n  |> keep(columns: [\"_time\", \"SoC\"])\n\n// Amperage Main Stream\nampsLoad_stream = from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => \n      not (\n          (r.device == \"Inverter\" and r._field == \"AmpsMPPT\") or \n          (r.device == \"Inverter\" and r._field == \"WattsMain\")\n      )  // Exclude specific rows\n  )\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\")\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> group()  // Remove any residual grouping to unify the data\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields into columns\n  |> map(fn: (r) => ({\n      r with \n      AmpsLoad: if exists r.AmpsInv and exists r.AmpsMPPT and exists r.AmpsMain then -1.0*((r.AmpsInv + r.AmpsMPPT) - r.AmpsMain) else float(v: 0.0)\n  }))\n  |> keep(columns: [\"_time\", \"AmpsLoad\"])  // Keep only relevant columns\n\n// Combine SoC and Runtime Calculation\njoin(tables: {soc: soc_stream, amps: ampsLoad_stream}, on: [\"_time\"])\n  |> map(fn: (r) => ({\n      r with \n      RuntimeHours: if r.AmpsLoad < 0.0 then ((r.SoC/100.0) * 800.0) / (-1.0*r.AmpsLoad) else float(v: 0.0),\n      RuntimeDays: if r.AmpsLoad < 0.0 then (((r.SoC/100.0) * 800.0) / (-1.0*r.AmpsLoad)) / 24.0 else float(v: 0.0)\n  }))\n  |> keep(columns: [\"_time\", \"RuntimeHours\"])  // Keep only relevant fields\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"soc_runtime\")",
          "refId": "A"
        }
      ],
      "title": " Run Time (0-7 days)",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "description": "State of Charge based on Voltage",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 100,
          "min": 0,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#00000000",
                "value": null
              },
              {
                "color": "dark-red",
                "value": 0
              },
              {
                "color": "orange",
                "value": 10
              },
              {
                "color": "yellow",
                "value": 25
              },
              {
                "color": "green",
                "value": 50
              },
              {
                "color": "blue",
                "value": 80
              }
            ]
          },
          "unit": "percent"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 3,
        "x": 18,
        "y": 0
      },
      "id": 12,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto"
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r._field == \"VoltsMain\" and r.device == \"Main\")\n  |> map(fn: (r) => ({\n      r with \n      SoC: if r._value >= 13.5 then 100.0 else\n           if r._value >= 13.35 then 99.0 else\n           if r._value >= 13.3 then 90.0 else\n           if r._value >= 13.25 then 80.0 else\n           if r._value >= 13.2 then 70.0 else\n           if r._value >= 13.16 then 60.0 else\n           if r._value >= 13.13 then 50.0 else\n           if r._value >= 13.1 then 40.0 else\n           if r._value >= 13.0 then 30.0 else\n           if r._value >= 12.9 then 20.0 else\n           if r._value >= 12.8 then 10.0 else\n           if r._value >= 12.3 then 5.0 else\n           if r._value >= 11.7 then 7.5 else\n           if r._value >= 11.0 then 2.0 else\n           if r._value >= 10.8 then 1.0 else\n           0.0  // Below Low Voltage Disconnect\n  }))\n  |> keep(columns: [\"_time\", \"SoC\"])  // Keep only time and calculated SoC\n  |> yield(name: \"state_of_charge\")",
          "refId": "Voltage"
        }
      ],
      "title": "State of Charge",
      "transparent": true,
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "mappings": [],
          "max": 120,
          "min": 32,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "#00000000",
                "value": null
              },
              {
                "color": "dark-blue",
                "value": 0
              },
              {
                "color": "blue",
                "value": 35
              },
              {
                "color": "green",
                "value": 40
              },
              {
                "color": "#EAB839",
                "value": 90
              },
              {
                "color": "dark-red",
                "value": 110
              }
            ]
          },
          "unit": "fahrenheit"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 3,
        "x": 21,
        "y": 0
      },
      "id": 5,
      "options": {
        "minVizHeight": 75,
        "minVizWidth": 75,
        "orientation": "auto",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showThresholdLabels": false,
        "showThresholdMarkers": true,
        "sizing": "auto"
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\")\n  |> filter(fn: (r) => r._field == \"BatteryTemp\")  // Focus on temperature\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"ConvertedTemperature\")",
          "refId": "Voltage"
        }
      ],
      "title": "Battery Temp",
      "transparent": true,
      "type": "gauge"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "Watts SolarCharger"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Watts MainShunt"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 5,
        "w": 12,
        "x": 0,
        "y": 3
      },
      "id": 3,
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\")\n  |> filter(fn: (r) => r._field == \"AmpsSolar\" or r._field == \"VoltsSolar\" or r._field == \"WattsSolar\")\n  |> group(columns: [\"_field\", \"device\"])  // Group by field and device for better series separation\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])  // Keep only relevant fields\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"voltage_data\")",
          "refId": "Voltage"
        }
      ],
      "title": "Solar Generation",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "description": "Production (MPPT and Charger) less what's feeding the battery",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": true,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": -1000
              },
              {
                "color": "green",
                "value": 0
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "WattsMPPT"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "WattsMain"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "WattsInv"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 8
      },
      "id": 9,
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => \n      not (\n          (r.device == \"Inverter\" and r._field == \"AmpsMPPT\") or \n          (r.device == \"Inverter\" and r._field == \"WattsMain\")\n      )  // Exclude specific rows\n  )\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"VoltsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\" or r._field == \"VoltsMain\" or r._field == \"VoltsInv\")\n\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> group()  // Remove any residual grouping to unify the data\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields into columns\n  |> map(fn: (r) => ({\n      r with \n      WattsMPPT: if exists r.AmpsMPPT and exists r.VoltsMPPT then (r.AmpsMPPT * r.VoltsMPPT)  else float(v: 0.0),\n      WattsMain: if exists r.AmpsMain and exists r.VoltsMain then (r.AmpsMain * r.VoltsMain)  else float(v: 0.0),\n      WattsInv: if exists r.AmpsInv and exists r.VoltsInv then (r.AmpsInv * r.VoltsInv)  else float(v: 0.0)\n  }))\n  |> keep(columns: [\"_time\", \"WattsMPPT\", \"WattsMain\", \"WattsInv\"])  // Keep only relevant columns\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"wattage_load\")",
          "refId": "Voltage"
        }
      ],
      "title": "Power ",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "description": "Production (MPPT and Charger) less what's feeding the battery",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "fieldMinMax": false,
          "mappings": [],
          "max": 1500,
          "min": -1500,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": -1000
              },
              {
                "color": "super-light-red",
                "value": -50
              },
              {
                "color": "transparent",
                "value": -20
              },
              {
                "color": "super-light-green",
                "value": 20
              },
              {
                "color": "dark-green",
                "value": 50
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 12,
        "y": 8
      },
      "id": 18,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => \n      not (\n          (r.device == \"Inverter\" and r._field == \"AmpsMPPT\") or \n          (r.device == \"Inverter\" and r._field == \"WattsMain\")\n      )  // Exclude specific rows\n  )\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"VoltsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\" or r._field == \"VoltsMain\" or r._field == \"VoltsInv\")\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> group()  // Remove any residual grouping to unify the data\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields into columns\n  |> map(fn: (r) => ({\n      r with \n      WattsMain: if exists r.AmpsMain and exists r.VoltsMain then (r.AmpsMain * r.VoltsMain)  else float(v: 0.0),\n      WattsInv: if exists r.AmpsInv and exists r.VoltsInv then (r.AmpsInv * r.VoltsInv)  else float(v: 0.0),\n      WattsMPPT: if exists r.AmpsMPPT and exists r.VoltsMPPT then (r.AmpsMPPT * r.VoltsMPPT)  else float(v: 0.0)\n  }))\n|> keep(columns: [\"WattsMPPT\", \"_time\"])  // Note order explicitly here\n|> sort(columns: [\"_time\"], desc: false)  // Ensure proper time ordering\n|> yield(name: \"wattage_load\")",
          "refId": "Voltage"
        }
      ],
      "title": "Solar-W",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "description": "Production (MPPT and Charger) less what's feeding the battery",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "fieldMinMax": false,
          "mappings": [],
          "max": 1500,
          "min": -1500,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": -1000
              },
              {
                "color": "super-light-red",
                "value": -50
              },
              {
                "color": "transparent",
                "value": -20
              },
              {
                "color": "super-light-green",
                "value": 20
              },
              {
                "color": "dark-green",
                "value": 50
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 15,
        "y": 8
      },
      "id": 19,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => \n      not (\n          (r.device == \"Inverter\" and r._field == \"AmpsMPPT\") or \n          (r.device == \"Inverter\" and r._field == \"WattsMain\")\n      )  // Exclude specific rows\n  )\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"VoltsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\" or r._field == \"VoltsMain\" or r._field == \"VoltsInv\")\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> group()  // Remove any residual grouping to unify the data\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields into columns\n  |> map(fn: (r) => ({\n      r with \n      WattsMain: if exists r.AmpsMain and exists r.VoltsMain then (r.AmpsMain * r.VoltsMain)  else float(v: 0.0),\n      WattsInv: if exists r.AmpsInv and exists r.VoltsInv then (r.AmpsInv * r.VoltsInv)  else float(v: 0.0),\n      WattsMPPT: if exists r.AmpsMPPT and exists r.VoltsMPPT then (r.AmpsMPPT * r.VoltsMPPT)  else float(v: 0.0)\n  }))\n|> keep(columns: [\"WattsMain\", \"_time\"])  // Note order explicitly here\n|> sort(columns: [\"_time\"], desc: false)  // Ensure proper time ordering\n|> yield(name: \"wattage_load\")",
          "refId": "Voltage"
        }
      ],
      "title": "Main-W",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "description": "Production (MPPT and Charger) less what's feeding the battery",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "fieldMinMax": false,
          "mappings": [],
          "max": 1500,
          "min": -1500,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": -1000
              },
              {
                "color": "super-light-red",
                "value": -50
              },
              {
                "color": "super-light-purple",
                "value": -20
              },
              {
                "color": "super-light-green",
                "value": 20
              },
              {
                "color": "dark-green",
                "value": 50
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 18,
        "y": 8
      },
      "id": 20,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => \n      not (\n          (r.device == \"Inverter\" and r._field == \"AmpsMPPT\") or \n          (r.device == \"Inverter\" and r._field == \"WattsMain\")\n      )  // Exclude specific rows\n  )\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"VoltsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\" or r._field == \"VoltsMain\" or r._field == \"VoltsInv\")\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> group()  // Remove any residual grouping to unify the data\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields into columns\n  |> map(fn: (r) => ({\n      r with \n      WattsMain: if exists r.AmpsMain and exists r.VoltsMain then (r.AmpsMain * r.VoltsMain)  else float(v: 0.0),\n      WattsInv: if exists r.AmpsInv and exists r.VoltsInv then (r.AmpsInv * r.VoltsInv)  else float(v: 0.0),\n      WattsMPPT: if exists r.AmpsMPPT and exists r.VoltsMPPT then (r.AmpsMPPT * r.VoltsMPPT)  else float(v: 0.0)\n  }))\n|> keep(columns: [\"WattsInv\", \"_time\"])  // Note order explicitly here\n|> sort(columns: [\"_time\"], desc: false)  // Ensure proper time ordering\n|> yield(name: \"wattage_load\")",
          "refId": "Voltage"
        }
      ],
      "title": "Inv/Conv-W",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "description": "Production (MPPT and Charger) less what's feeding the battery",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "max": 1500,
          "min": -1500,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": -2000
              },
              {
                "color": "super-light-red",
                "value": -50
              },
              {
                "color": "transparent",
                "value": -20
              },
              {
                "color": "super-light-green",
                "value": 20
              },
              {
                "color": "dark-green",
                "value": 50
              }
            ]
          },
          "unit": "watt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 21,
        "y": 8
      },
      "id": 10,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "center",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => \n      not (\n          (r.device == \"Inverter\" and r._field == \"AmpsMPPT\") or \n          (r.device == \"Inverter\" and r._field == \"WattsMain\")\n      )  // Exclude specific rows\n  )\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\" or r._field == \"VoltsMain\")\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> group()  // Remove any residual grouping to unify the data\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields into columns\n  |> map(fn: (r) => ({\n      r with \n      WattsLoad: if exists r.AmpsInv and exists r.AmpsMPPT and exists r.AmpsMain then -1.0*((r.AmpsInv + r.AmpsMPPT) - r.AmpsMain)*r.VoltsMain else float(v: 0.0)\n  }))\n  |> keep(columns: [\"_time\", \"WattsLoad\"])  // Keep only relevant columns\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"wattage_load\")",
          "refId": "Voltage"
        }
      ],
      "title": "Load-W",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": true,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "decimals": 2,
          "fieldMinMax": true,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": -100
              },
              {
                "color": "green",
                "value": 0
              }
            ]
          },
          "unit": "amp"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "AmpsMPPT"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "AmpsInv"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "AmpsMain"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 14
      },
      "id": 6,
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\")\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> keep(columns: [\"_time\", \"_field\", \"_value\"])  // Keep relevant fields\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"amperage_data\")",
          "refId": "Voltage"
        }
      ],
      "title": "Amperage",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "max": 60,
          "min": -60,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": -1000
              },
              {
                "color": "transparent",
                "value": -0.7
              },
              {
                "color": "transparent",
                "value": 0
              },
              {
                "color": "green",
                "value": 0.7
              }
            ]
          },
          "unit": "amp"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 12,
        "y": 14
      },
      "id": 16,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\")\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> group()  // Remove any residual grouping to unify the data\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields as columns\n    |> map(fn: (r) => ({\n    r with \n    MPPT: r.AmpsMPPT\n}))\n  |> keep(columns: [\"MPPT\", \"_time\", ])  // Keep only relevant columns\n  |> sort(columns: [\"_time\"], desc: false)  // Ensure ascending time order\n  |> yield(name: \"amperage_data\")",
          "refId": "Voltage"
        }
      ],
      "title": "Solar-A",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "max": 60,
          "min": -60,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": -1000
              },
              {
                "color": "super-light-red",
                "value": -0.8
              },
              {
                "color": "super-light-green",
                "value": 0
              },
              {
                "color": "green",
                "value": 1
              }
            ]
          },
          "unit": "amp"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 15,
        "y": 14
      },
      "id": 15,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\")\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> group()  // Remove any residual grouping to unify the data\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields as columns\n    |> map(fn: (r) => ({\n    r with \n    Main: r.AmpsMain\n}))\n  |> keep(columns: [\"Main\", \"_time\", ])  // Keep only relevant columns\n  |> sort(columns: [\"_time\"], desc: false)  // Ensure ascending time order\n  |> yield(name: \"amperage_data\")",
          "refId": "Voltage"
        }
      ],
      "title": "Main-A",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "max": 60,
          "min": -60,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": -1000
              },
              {
                "color": "super-light-red",
                "value": -3
              },
              {
                "color": "super-light-purple",
                "value": -1.5
              },
              {
                "color": "super-light-green",
                "value": 1.5
              },
              {
                "color": "dark-green",
                "value": 3
              }
            ]
          },
          "unit": "amp"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 18,
        "y": 14
      },
      "id": 17,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\")\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> group()  // Remove any residual grouping to unify the data\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields as columns\n    |> map(fn: (r) => ({\n    r with \n    Inv: r.AmpsInv\n}))\n  |> keep(columns: [\"Inv\", \"_time\", ])  // Keep only relevant columns\n  |> sort(columns: [\"_time\"], desc: false)  // Ensure ascending time order\n  |> yield(name: \"amperage_data\")",
          "refId": "Voltage"
        }
      ],
      "title": "Inv/Conv-A",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "description": "Production (MPPT and Charger) less what's feeding the battery",
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "decimals": 1,
          "mappings": [],
          "max": 60,
          "min": -60,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": -1000
              },
              {
                "color": "semi-dark-red",
                "value": -3
              },
              {
                "color": "super-light-red",
                "value": -1.5
              },
              {
                "color": "super-light-green",
                "value": 0
              },
              {
                "color": "green",
                "value": 1.5
              },
              {
                "color": "dark-green",
                "value": 3
              }
            ]
          },
          "unit": "amp"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 21,
        "y": 14
      },
      "id": 8,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "/^AmpsLoad$/",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "value",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => \n      not (\n          (r.device == \"Inverter\" and r._field == \"AmpsMPPT\") or \n          (r.device == \"Inverter\" and r._field == \"WattsMain\")\n      )  // Exclude specific rows\n  )\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"AmpsMPPT\" or r._field == \"WattsMain\" or r._field == \"WattsInv\")\n  |> map(fn: (r) => ({\n      r with \n      _field: if r._field == \"WattsMain\" then \"AmpsMain\" else if r._field == \"WattsInv\" then \"AmpsInv\" else r._field\n  }))\n  |> group()  // Remove any residual grouping to unify the data\n  |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")  // Align fields into columns\n  |> map(fn: (r) => ({\n      r with \n      AmpsLoad: if exists r.AmpsInv and exists r.AmpsMPPT and exists r.AmpsMain then -1.0*((r.AmpsInv + r.AmpsMPPT) - r.AmpsMain) else float(v: 0.0)\n  }))\n  |> keep(columns: [\"_time\", \"AmpsLoad\"])  // Keep only relevant columns\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"amperage_load\")",
          "refId": "Voltage"
        }
      ],
      "title": "Load-A",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "smooth",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "area"
            }
          },
          "fieldMinMax": true,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "red",
                "value": 11
              },
              {
                "color": "orange",
                "value": 11.7
              },
              {
                "color": "green",
                "value": 12.8
              },
              {
                "color": "blue",
                "value": 14
              },
              {
                "color": "dark-red",
                "value": 14.6
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "VoltsMPPT"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "orange",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "VoltsMain"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "blue",
                  "mode": "fixed"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "VoltsInv"
            },
            "properties": [
              {
                "id": "color",
                "value": {
                  "fixedColor": "green",
                  "mode": "fixed"
                }
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 6,
        "w": 12,
        "x": 0,
        "y": 20
      },
      "id": 1,
      "options": {
        "legend": {
          "calcs": [
            "mean"
          ],
          "displayMode": "list",
          "placement": "bottom",
          "showLegend": true
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"VoltsMPPT\" or r._field == \"VoltsInv\" or r._field == \"VoltsMain\")\n  |> group(columns: [\"_field\", \"device\"])  // Group by field and device for better series separation\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])  // Keep only relevant fields\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"voltage_data\")",
          "refId": "Voltage"
        }
      ],
      "title": "Voltage",
      "transparent": true,
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "max": 14.8,
          "min": 11,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": 0
              },
              {
                "color": "orange",
                "value": 11.6
              },
              {
                "color": "#EAB839",
                "value": 12.5
              },
              {
                "color": "green",
                "value": 12.8
              },
              {
                "color": "blue",
                "value": 14
              },
              {
                "color": "dark-red",
                "value": 14.8
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 12,
        "y": 20
      },
      "id": 21,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"VoltsMPPT\")\n  |> group(columns: [\"_field\", \"device\"])  // Group by field and device for better series separation\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])  // Keep only relevant fields\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"voltage_data\")",
          "refId": "Voltage"
        }
      ],
      "title": "Solar-V",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "max": 14.8,
          "min": 11,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": 0
              },
              {
                "color": "orange",
                "value": 11.6
              },
              {
                "color": "#EAB839",
                "value": 12.5
              },
              {
                "color": "green",
                "value": 12.8
              },
              {
                "color": "blue",
                "value": 14
              },
              {
                "color": "dark-red",
                "value": 14.8
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 15,
        "y": 20
      },
      "id": 22,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"VoltsMain\")\n  |> group(columns: [\"_field\", \"device\"])  // Group by field and device for better series separation\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])  // Keep only relevant fields\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"voltage_data\")",
          "refId": "Voltage"
        }
      ],
      "title": "Main-V",
      "transparent": true,
      "type": "stat"
    },
    {
      "datasource": {
        "type": "influxdb",
        "uid": "fe6pg0n8yilmof"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "green",
            "mode": "thresholds"
          },
          "decimals": 2,
          "mappings": [],
          "max": 14.8,
          "min": 11,
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "transparent",
                "value": null
              },
              {
                "color": "dark-red",
                "value": 0
              },
              {
                "color": "orange",
                "value": 11.6
              },
              {
                "color": "#EAB839",
                "value": 12.5
              },
              {
                "color": "green",
                "value": 12.8
              },
              {
                "color": "blue",
                "value": 14
              },
              {
                "color": "dark-red",
                "value": 14.8
              }
            ]
          },
          "unit": "volt"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 6,
        "w": 3,
        "x": 18,
        "y": 20
      },
      "id": 23,
      "options": {
        "colorMode": "value",
        "graphMode": "area",
        "justifyMode": "auto",
        "orientation": "auto",
        "percentChangeColorMode": "standard",
        "reduceOptions": {
          "calcs": [
            "lastNotNull"
          ],
          "fields": "",
          "values": false
        },
        "showPercentChange": false,
        "textMode": "auto",
        "wideLayout": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "influxdb",
            "uid": "fe6pg0n8yilmof"
          },
          "query": "from(bucket: \"power_monitoring\")\n  |> range(start: v.timeRangeStart, stop: v.timeRangeStop)\n  |> aggregateWindow(every: ${aggregation_interval}, fn: mean, createEmpty: false)\n  |> filter(fn: (r) => r.device == \"Solar\" or r.device == \"Inverter\" or r.device == \"Main\")\n  |> filter(fn: (r) => r._field == \"VoltsInv\")\n  |> group(columns: [\"_field\", \"device\"])  // Group by field and device for better series separation\n  |> keep(columns: [\"_time\", \"_value\", \"_field\"])  // Keep only relevant fields\n  |> sort(columns: [\"_time\"], desc: false)\n  |> yield(name: \"voltage_data\")",
          "refId": "Voltage"
        }
      ],
      "title": "Inv/Conv-V",
      "transparent": true,
      "type": "stat"
    }
  ],
  "preload": false,
  "refresh": "1m",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "auto": false,
        "auto_count": 30,
        "auto_min": "10s",
        "current": {
          "text": "1m",
          "value": "1m"
        },
        "hide": 1,
        "label": "Granularity",
        "name": "aggregation_interval",
        "options": [
          {
            "selected": true,
            "text": "1m",
            "value": "1m"
          },
          {
            "selected": false,
            "text": "5m",
            "value": "5m"
          },
          {
            "selected": false,
            "text": "30m",
            "value": "30m"
          },
          {
            "selected": false,
            "text": "1h",
            "value": "1h"
          },
          {
            "selected": false,
            "text": "4h",
            "value": "4h"
          },
          {
            "selected": false,
            "text": "12h",
            "value": "12h"
          },
          {
            "selected": false,
            "text": "24h",
            "value": "24h"
          }
        ],
        "query": "1m,5m,30m,1h,4h,12h,24h",
        "refresh": 2,
        "type": "interval"
      }
    ]
  },
  "time": {
    "from": "now-24h",
    "to": "now"
  },
  "timepicker": {
    "refresh_intervals": [
      "1m",
      "5m",
      "15m",
      "30m"
    ]
  },
  "timezone": "browser",
  "title": "RenogyView",
  "uid": "ee6phchr2uarkb",
  "version": 88,
  "weekStart": ""
}